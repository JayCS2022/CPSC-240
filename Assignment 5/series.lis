     1                                  ;****************************************************************************************************************************
     2                                  ;Program name: "Execution Speed".                                                                                  *
     3                                  ;white space.  Copyright (C) 2024  Jay Parmar                                                                               *
     4                                  ;This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License  *
     5                                  ;version 3 as published by the Free Software Foundation.                                                                    *
     6                                  ;This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied         *
     7                                  ;warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.     *
     8                                  ;A copy of the GNU General Public License v3 is available here:  <https://www.gnu.org/licenses/>.                           *
     9                                  ;****************************************************************************************************************************
    10                                  
    11                                  
    12                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3=========4=========5=========6=========7**
    13                                  ;Author information
    14                                  ;  Author name: Jay Parmar
    15                                  ;  Programmer CWID: 885463034
    16                                  ;  Author email: Jay-04.CS@csu.fullerton.edu
    17                                  ;
    18                                  ;Program information
    19                                  ; Program name: Execution Speed
    20                                  ;  Programming languages X86 with two modules in C
    21                                  ;Purpose
    22                                  ;  This program will serve to calculate the value of e^x.
    23                                  ;
    24                                  ;Project information
    25                                  ;  Files: main.c, series.asm, taylor.asm, r.sh
    26                                  ;  Status: The program has been tested extensively with no detectable errors.
    27                                  ;
    28                                  ;Translator information
    29                                  ;  Linux: nasm -f elf64 -l series.lis -o series.o series.asm
    30                                  ;
    31                                  ;===== Begin code area ====================================================================================================================================================
    32                                  
    33                                  ;Declarations
    34                                  extern fgets
    35                                  extern printf
    36                                  extern scanf
    37                                  extern stdin
    38                                  extern strlen
    39                                  extern taylor
    40                                  global series
    41                                  
    42                                  segment .data
    43 00000000 0A506C656173652065-         instruction db 10, "Please enter a float number value for x: ", 0
    43 00000009 6E746572206120666C-
    43 00000012 6F6174206E756D6265-
    43 0000001B 722076616C75652066-
    43 00000024 6F7220783A2000     
    44 0000002B 257300                      stringform db "%s", 0
    45 0000002E 0A506C656173652065-         sum db 10, "Please enter the number of terms to include in the Taylor sum: ", 0
    45 00000037 6E7465722074686520-
    45 00000040 6E756D626572206F66-
    45 00000049 207465726D7320746F-
    45 00000052 20696E636C75646520-
    45 0000005B 696E20746865205461-
    45 00000064 796C6F722073756D3A-
    45 0000006D 2000               
    46 0000006F 256C6600                    floatform db "%lf", 0
    47 00000073 256C6400                    intform db "%ld", 0
    48 00000077 0A5468652074696D65-         clock db 10, "The time on the clock is now %ld tics and taylor has been called", 10, 0
    48 00000080 206F6E207468652063-
    48 00000089 6C6F636B206973206E-
    48 00000092 6F7720256C64207469-
    48 0000009B 637320616E64207461-
    48 000000A4 796C6F722068617320-
    48 000000AD 6265656E2063616C6C-
    48 000000B6 65640A00           
    49 000000BA 0A5468616E6B20796F-         program db 10, "Thank you for waiting", 10, 0
    49 000000C3 7520666F7220776169-
    49 000000CC 74696E670A00       
    50 000000D2 0A5468652074696D65-         clock_time db 10, "The time on the clock when Taylor terminated was %ld tics", 10, 0
    50 000000DB 206F6E207468652063-
    50 000000E4 6C6F636B207768656E-
    50 000000ED 205461796C6F722074-
    50 000000F6 65726D696E61746564-
    50 000000FF 2077617320256C6420-
    50 00000108 746963730A00       
    51 0000010E 0A5468652065786563-         time db 10, "The execution time was %ld tics.", 10, 0
    51 00000117 7574696F6E2074696D-
    51 00000120 652077617320256C64-
    51 00000129 20746963732E0A00   
    52 00000131 0A54686520636F6D70-         computation db 10, "The computed approximation of e^x is %lf with precision of 8 digits right of the point.", 10, 0
    52 0000013A 757465642061707072-
    52 00000143 6F78696D6174696F6E-
    52 0000014C 206F6620655E782069-
    52 00000155 7320256C6620776974-
    52 0000015E 682070726563697369-
    52 00000167 6F6E206F6620382064-
    52 00000170 696769747320726967-
    52 00000179 6874206F6620746865-
    52 00000182 20706F696E742E0A00 
    53 0000018B 0A5468616E6B20796F-         calculator db 10, "Thank you for using the Eyere exponential calculator.", 10, 0
    53 00000194 7520666F7220757369-
    53 0000019D 6E6720746865204579-
    53 000001A6 657265206578706F6E-
    53 000001AF 656E7469616C206361-
    53 000001B8 6C63756C61746F722E-
    53 000001C1 0A00               
    54 000001C3 0A506C656173652072-         complete db 10, "Please return another day. The computed value will be set to the caller functions", 10, 0
    54 000001CC 657475726E20616E6F-
    54 000001D5 74686572206461792E-
    54 000001DE 2054686520636F6D70-
    54 000001E7 757465642076616C75-
    54 000001F0 652077696C6C206265-
    54 000001F9 2073657420746F2074-
    54 00000202 68652063616C6C6572-
    54 0000020B 2066756E6374696F6E-
    54 00000214 730A00             
    55                                  
    56                                  segment .bss
    57                                     
    58                                  segment .text
    59                                      series:
    60 00000000 55                              push rbp
    61 00000001 4889E5                          mov rbp, rsp
    62 00000004 53                              push rbx
    63 00000005 51                              push rcx
    64 00000006 52                              push rdx
    65 00000007 57                              push rdi
    66 00000008 56                              push rsi
    67 00000009 4150                            push r8
    68 0000000B 4151                            push r9
    69 0000000D 4152                            push r10
    70 0000000F 4153                            push r11
    71 00000011 4154                            push r12
    72 00000013 4155                            push r13
    73 00000015 4156                            push r14
    74 00000017 4157                            push r15
    75 00000019 9C                              pushf
    76                                  
    77                                          ;Prints - Please enter a float number value for x:
    78 0000001A B800000000                      mov rax, 0
    79 0000001F 48BF-                           mov rdi, stringform
    79 00000021 [2B00000000000000] 
    80 00000029 48BE-                           mov rsi, instruction
    80 0000002B [0000000000000000] 
    81 00000033 E8(00000000)                    call printf
    82                                  
    83                                          ;Asks user for float number input
    84 00000038 B801000000                      mov rax, 1
    85 0000003D 48BF-                           mov rdi, floatform
    85 0000003F [6F00000000000000] 
    86 00000047 4889E6                          mov rsi, rsp
    87 0000004A E8(00000000)                    call scanf
    88 0000004F F2440F103C24                    movsd xmm15, [rsp]
    89                                  
    90                                          ;Prints - Please enter the number of terms to include in the Taylor sum:
    91 00000055 B800000000                      mov rax, 0
    92 0000005A 48BF-                           mov rdi, sum
    92 0000005C [2E00000000000000] 
    93 00000064 E8(00000000)                    call printf
    94                                  
    95                                          ;Asks user for number input
    96 00000069 B801000000                      mov rax, 1
    97 0000006E 48BF-                           mov rdi, floatform
    97 00000070 [6F00000000000000] 
    98 00000078 4889E6                          mov rsi, rsp
    99 0000007B E8(00000000)                    call scanf
   100 00000080 F2440F102C24                    movsd xmm13, [rsp]
   101                                  
   102                                          ;Sends the two number inputs to the taylor.asm file to calculate the value for e^x
   103 00000086 0F31                            rdtsc
   104 00000088 48C1E220                        shl rdx, 32
   105 0000008C 4801D0                          add rax, rdx
   106 0000008F B801000000                      mov rax, 1
   107 00000094 664C0F7EFF                      movq rdi, xmm15
   108 00000099 664C0F7EEE                      movq rsi, xmm13
   109 0000009E E8(00000000)                    call taylor
   110 000000A3 0F31                            rdtsc
   111 000000A5 48C1E220                        shl rdx, 32
   112 000000A9 4801D0                          add rax, rdx
   113                                  
   114                                          ;Calculates the number of tics
   115 000000AC B800000000                      mov rax, 0
   116 000000B1 BA00000000                      mov rdx, 0
   117 000000B6 0FA2                            cpuid
   118 000000B8 0F31                            rdtsc
   119 000000BA 48C1E220                        shl rdx, 32
   120 000000BE 4801D0                          add rax, rdx
   121 000000C1 4989C4                          mov r12, rax
   122                                  
   123                                          ;Prints - The time on the clock is now %ld tics and taylor has been called
   124 000000C4 B800000000                      mov rax, 0
   125 000000C9 48BF-                           mov rdi, clock
   125 000000CB [7700000000000000] 
   126 000000D3 4C89E6                          mov rsi, r12
   127 000000D6 E8(00000000)                    call printf
   128                                  
   129                                          ;Prints - Thank you for waiting
   130 000000DB B800000000                      mov rax, 0
   131 000000E0 48BF-                           mov rdi, program
   131 000000E2 [BA00000000000000] 
   132 000000EA E8(00000000)                    call printf
   133                                  
   134                                          ;Calculates the number of tics
   135 000000EF B800000000                      mov rax, 0
   136 000000F4 BA00000000                      mov rdx, 0
   137 000000F9 0FA2                            cpuid
   138 000000FB 0F31                            rdtsc
   139 000000FD 48C1E220                        shl rdx, 32
   140 00000101 4801D0                          add rax, rdx
   141 00000104 4989C5                          mov r13, rax
   142                                  
   143                                          ;Prints - The time on the clock when Taylor terminated was %ld tics
   144 00000107 B800000000                      mov rax, 0
   145 0000010C 48BF-                           mov rdi, clock_time
   145 0000010E [D200000000000000] 
   146 00000116 4C89EE                          mov rsi, r13
   147 00000119 E8(00000000)                    call printf
   148                                  
   149                                          ;Calculates the number of tics
   150 0000011E B800000000                      mov rax, 0
   151 00000123 BA00000000                      mov rdx, 0
   152 00000128 0FA2                            cpuid
   153 0000012A 0F31                            rdtsc
   154 0000012C 48C1E220                        shl rdx, 32
   155 00000130 4801D0                          add rax, rdx
   156 00000133 4989C6                          mov r14, rax
   157                                  
   158                                          ;The execution time was %ld tics.
   159 00000136 B800000000                      mov qword rax, 0
   160 0000013B 48BF-                           mov rdi, time
   160 0000013D [0E01000000000000] 
   161 00000145 4C89F6                          mov rsi, r14
   162 00000148 E8(00000000)                    call printf
   163                                  
   164                                          ;Prints - The computed approximation of e^x is %lf with precision of 8 digits right of the point.
   165 0000014D B801000000                      mov rax, 1
   166 00000152 48BF-                           mov rdi, computation
   166 00000154 [3101000000000000] 
   167 0000015C F2410F10C6                      movsd xmm0, xmm14
   168 00000161 E8(00000000)                    call printf
   169                                  
   170                                          ;Prints - Thank you for using the Eyere exponential calculator.
   171 00000166 B800000000                      mov rax, 0
   172 0000016B 48BF-                           mov rdi, calculator
   172 0000016D [8B01000000000000] 
   173 00000175 E8(00000000)                    call printf
   174                                  
   175                                          ;Prints - Please return another day. The computed value will be set to the caller functions
   176 0000017A B800000000                      mov rax, 0
   177 0000017F 48BF-                           mov rdi, complete
   177 00000181 [C301000000000000] 
   178 00000189 E8(00000000)                    call printf
   179                                  
   180                                          ;Sends the e^x value to the main.c file
   181 0000018E B801000000                      mov rax, 1
   182 00000193 F2410F10C6                      movsd xmm0, xmm14
   183                                  
   184                                      ;Restores the stack
   185 00000198 9D                              popf
   186 00000199 415F                            pop r15
   187 0000019B 415E                            pop r14
   188 0000019D 415D                            pop r13
   189 0000019F 415C                            pop r12
   190 000001A1 415B                            pop r11
   191 000001A3 415A                            pop r10
   192 000001A5 4159                            pop r9
   193 000001A7 4158                            pop r8
   194 000001A9 5E                              pop rsi
   195 000001AA 5F                              pop rdi
   196 000001AB 5A                              pop rdx
   197 000001AC 59                              pop rcx
   198 000001AD 5B                              pop rbx
   199 000001AE 5D                              pop rbp
   200 000001AF C3                              ret
