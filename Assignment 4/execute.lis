     1                                  ;****************************************************************************************************************************
     2                                  ;Program name: "Non-deterministic Random Numbers".                                                                                  *
     3                                  ;white space.  Copyright (C) 2024  Jay Parmar                                                                               *
     4                                  ;This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License  *
     5                                  ;version 3 as published by the Free Software Foundation.                                                                    *
     6                                  ;This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied         *
     7                                  ;warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.     *
     8                                  ;A copy of the GNU General Public License v3 is available here:  <https://www.gnu.org/licenses/>.                           *
     9                                  ;****************************************************************************************************************************
    10                                  
    11                                  
    12                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3=========4=========5=========6=========7**
    13                                  ;Author information
    14                                  ;  Author name: Jay Parmar
    15                                  ;  Programmer CWID: 885463034
    16                                  ;  Author email: Jay-04.CS@csu.fullerton.edu
    17                                  ;
    18                                  ;Program information
    19                                  ; Program name: Non-deterministic Random Numbers
    20                                  ;  Programming languages X86 with two modules in C
    21                                  ;Purpose
    22                                  ;  This program will serve to create numbers, normalize the numbers the program created, sort the numbers, and print the numbers.
    23                                  ;
    24                                  ;Project information
    25                                  ;  Files: main.c, execute.asm, fill_random_array.asm, normalize_array.asm, show_array.asm, isnan.asm, sort.c, r.sh
    26                                  ;  Status: The program has been tested extensively with no detectable errors.
    27                                  ;
    28                                  ;Translator information
    29                                  ;  Linux: nasm -f elf64 -l execute.lis -o execute.o execute.asm
    30                                  ;
    31                                  ;===== Begin code area ====================================================================================================================================================
    32                                  
    33                                  ;Declarations
    34                                  extern fgets
    35                                  extern printf
    36                                  extern scanf
    37                                  extern stdin
    38                                  extern strlen
    39                                  extern isnan
    40                                  extern fill_random_array
    41                                  extern normalize_array
    42                                  extern show_array
    43                                  extern sort
    44                                  global execute
    45                                  
    46                                  segment .data
    47 00000000 506C6561736520656E-         instruction db "Please enter your name: ", 0
    47 00000009 74657220796F757220-
    47 00000012 6E616D653A2000     
    48 00000019 257300                      stringform db "%s", 0
    49 0000001C 506C6561736520656E-         title db "Please enter your title (Mr,Ms,Sargent,Chief,Project Leader,etc): ", 0
    49 00000025 74657220796F757220-
    49 0000002E 7469746C6520284D72-
    49 00000037 2C4D732C5361726765-
    49 00000040 6E742C43686965662C-
    49 00000049 50726F6A656374204C-
    49 00000052 65616465722C657463-
    49 0000005B 293A2000           
    50 0000005F 257300                      title_stringform db "%s", 0
    51 00000062 4E69636520746F206D-         thank_you db "Nice to meet you %s %s.", 10, 0
    51 0000006B 65657420796F752025-
    51 00000074 732025732E0A00     
    52 0000007B 256C6600                    floatform db "%lf", 0
    53 0000007F 256C6400                    intform db "%ld", 0
    54 00000083 0A546869732070726F-         program_numbers db 10, "This program will generate 64-bit IEEE float numbers", 0
    54 0000008C 6772616D2077696C6C-
    54 00000095 2067656E6572617465-
    54 0000009E 2036342D6269742049-
    54 000000A7 45454520666C6F6174-
    54 000000B0 206E756D6265727300 
    55 000000B9 0A486F77206D616E79-         numbers db 10, "How many numbers do you want. Today's limit is 100 per customer. ", 0
    55 000000C2 206E756D6265727320-
    55 000000CB 646F20796F75207761-
    55 000000D4 6E742E20546F646179-
    55 000000DD 2773206C696D697420-
    55 000000E6 697320313030207065-
    55 000000EF 7220637573746F6D65-
    55 000000F8 722E2000           
    56 000000FC 506C6561736520656E-         error db "Please enter a number that is larger than 0 and less than 100.", 10, 0
    56 00000105 7465722061206E756D-
    56 0000010E 626572207468617420-
    56 00000117 6973206C6172676572-
    56 00000120 207468616E20302061-
    56 00000129 6E64206C6573732074-
    56 00000132 68616E203130302E0A-
    56 0000013B 00                 
    57 0000013C 596F7572206E756D62-         array_storage db "Your numbers have been stored in an array. Here is that array.", 10, 10, 0
    57 00000145 657273206861766520-
    57 0000014E 6265656E2073746F72-
    57 00000157 656420696E20616E20-
    57 00000160 61727261792E204865-
    57 00000169 726520697320746861-
    57 00000172 742061727261792E0A-
    57 0000017B 0A00               
    58 0000017D 546865206172726179-         array_range db "The array will now be normalized to the range 1.0 to 2.0 Here is the normalized array", 10, 10, 0
    58 00000186 2077696C6C206E6F77-
    58 0000018F 206265206E6F726D61-
    58 00000198 6C697A656420746F20-
    58 000001A1 7468652072616E6765-
    58 000001AA 20312E3020746F2032-
    58 000001B3 2E3020486572652069-
    58 000001BC 7320746865206E6F72-
    58 000001C5 6D616C697A65642061-
    58 000001CE 727261790A0A00     
    59 000001D5 546865206172726179-         sort_array_message db "The array will now be sorted", 10, 10, 0
    59 000001DE 2077696C6C206E6F77-
    59 000001E7 20626520736F727465-
    59 000001F0 640A0A00           
    60 000001F4 476F6F642062796520-         program_complete db "Good bye Freshman. You are welcome any time.", 10, 10, 0
    60 000001FD 46726573686D616E2E-
    60 00000206 20596F752061726520-
    60 0000020F 77656C636F6D652061-
    60 00000218 6E792074696D652E0A-
    60 00000221 0A00               
    61                                  
    62                                  segment .bss
    63                                      align 64
    64 00000000 <res 32h>                   username resb 50
    65 00000032 <res 28h>                   user_title resb 40
    66 0000005A <res 320h>                  float_numbers resq 100
    67                                  
    68                                  segment .text
    69                                      execute:
    70 00000000 55                              push rbp
    71 00000001 4889E5                          mov rbp, rsp
    72 00000004 53                              push rbx
    73 00000005 51                              push rcx
    74 00000006 52                              push rdx
    75 00000007 57                              push rdi
    76 00000008 56                              push rsi
    77 00000009 4150                            push r8
    78 0000000B 4151                            push r9
    79 0000000D 4152                            push r10
    80 0000000F 4153                            push r11
    81 00000011 4154                            push r12
    82 00000013 4155                            push r13
    83 00000015 4156                            push r14
    84 00000017 4157                            push r15
    85 00000019 9C                              pushf
    86                                  
    87                                      ;Shows message prompting the user to input name
    88 0000001A B800000000                      mov qword rax, 0
    89 0000001F 48BF-                           mov rdi, stringform
    89 00000021 [1900000000000000] 
    90 00000029 48BE-                           mov rsi, instruction
    90 0000002B [0000000000000000] 
    91 00000033 E8(00000000)                    call printf
    92                                      
    93                                      ;Takes the user input and stores that data
    94 00000038 B800000000                      mov rax, 0
    95 0000003D 48BF-                           mov rdi, username
    95 0000003F [0000000000000000] 
    96 00000047 BE32000000                      mov rsi, 50
    97 0000004C 488B1425[00000000]              mov rdx, [stdin]
    98 00000054 E8(00000000)                    call fgets
    99                                      
   100                                      ;Shows message prompting the user to input title
   101 00000059 B800000000                      mov rax, 0
   102 0000005E 48BF-                           mov rdi, title_stringform
   102 00000060 [5F00000000000000] 
   103 00000068 48BE-                           mov rsi, title
   103 0000006A [1C00000000000000] 
   104 00000072 E8(00000000)                    call printf
   105                                  
   106                                      ;Takes the user input and stores that data
   107 00000077 B800000000                      mov rax, 0
   108 0000007C 48BF-                           mov rdi, user_title
   108 0000007E [3200000000000000] 
   109 00000086 BE32000000                      mov rsi, 50
   110 0000008B 488B1425[00000000]              mov rdx, [stdin]
   111 00000093 E8(00000000)                    call fgets
   112                                          
   113                                      ;Remove newline for formatting output message
   114 00000098 B800000000                      mov rax, 0
   115 0000009D 48BF-                           mov rdi, user_title
   115 0000009F [3200000000000000] 
   116 000000A7 E8(00000000)                    call strlen
   117 000000AC C680[31000000]00                mov [user_title+rax-1], byte 0
   118                                  
   119 000000B3 B800000000                      mov rax, 0
   120 000000B8 48BF-                           mov rdi, username
   120 000000BA [0000000000000000] 
   121 000000C2 E8(00000000)                    call strlen
   122 000000C7 C680[FFFFFFFF]00                mov [username+rax-1], byte 0
   123                                  
   124                                      ;Shows thank you text
   125 000000CE B800000000                      mov rax, 0
   126 000000D3 48BF-                           mov rdi, thank_you
   126 000000D5 [6200000000000000] 
   127 000000DD 48BE-                           mov rsi, user_title
   127 000000DF [3200000000000000] 
   128 000000E7 48BA-                           mov rdx, username
   128 000000E9 [0000000000000000] 
   129 000000F1 E8(00000000)                    call printf
   130                                      
   131                                      ;prints message - This program will generate 64-bit IEEE float numbers
   132 000000F6 B800000000                      mov qword rax, 0
   133 000000FB 48BF-                           mov rdi, program_numbers
   133 000000FD [8300000000000000] 
   134 00000105 E8(00000000)                    call printf
   135                                      
   136                                      array_numbers:
   137                                      ;prints message - How many numbers do you want. Today's limit is 100 per customer. 
   138 0000010A B800000000                      mov qword rax, 0
   139 0000010F 48BF-                           mov rdi, numbers
   139 00000111 [B900000000000000] 
   140 00000119 E8(00000000)                    call printf
   141                                  
   142 0000011E B800000000                      mov qword rax, 0
   143 00000123 48BF-                           mov rdi, intform
   143 00000125 [7F00000000000000] 
   144 0000012D 4889E6                          mov rsi, rsp
   145 00000130 E8(00000000)                    call scanf
   146 00000135 4C8B3C24                        mov r15, [rsp]
   147                                  
   148                                      ;Checks the user input to make sure that the number is not less than 0 otherwise asks for user input
   149 00000139 4983FF00                        cmp r15, 0
   150 0000013D 7C08                            jl wrong_size
   151                                  
   152                                      ;Checks the user input to make sure that the number is not greater than 100 otherwise asks for user input
   153 0000013F 4983FF64                        cmp r15, 100
   154 00000143 7F02                            jg wrong_size
   155                                  
   156                                      ;If the user input is correct then continues with the rest of the program
   157 00000145 EB16                            jmp continue
   158                                  
   159                                      ;Prints - Please enter a number that is larger than 0 and less than 100.
   160                                          wrong_size:
   161 00000147 B800000000                      mov rax, 0
   162 0000014C 48BF-                           mov rdi, error
   162 0000014E [FC00000000000000] 
   163 00000156 E8(00000000)                    call printf
   164 0000015B EBAD                            jmp array_numbers
   165                                  
   166                                  
   167                                      ;If the user input is greater than 0 and less than 100 then the program will create numbers
   168                                      continue:
   169 0000015D B800000000                      mov qword rax, 0
   170 00000162 48BF-                           mov rdi, float_numbers
   170 00000164 [5A00000000000000] 
   171 0000016C 4C89FE                          mov rsi, r15
   172 0000016F E8(00000000)                    call fill_random_array
   173                                      
   174                                      ;prints message - Your numbers have been stored in an array. Here is that array.
   175 00000174 B800000000                      mov qword rax, 0
   176 00000179 48BF-                           mov rdi, array_storage
   176 0000017B [3C01000000000000] 
   177 00000183 E8(00000000)                    call printf
   178                                  
   179                                      ;Prints the array that the program created
   180 00000188 B800000000                      mov qword rax, 0
   181 0000018D 48BF-                           mov rdi, float_numbers
   181 0000018F [5A00000000000000] 
   182 00000197 4C89FE                          mov rsi, r15
   183 0000019A E8(00000000)                    call show_array
   184                                  
   185                                      ; Prints - The array will now be normalized to the range 1.0 to 2.0 Here is the normalized array
   186 0000019F B800000000                      mov qword rax, 0
   187 000001A4 48BF-                           mov rdi, array_range
   187 000001A6 [7D01000000000000] 
   188 000001AE E8(00000000)                    call printf
   189                                  
   190                                      ;Program normalizes the array
   191 000001B3 B800000000                      mov qword rax, 0
   192 000001B8 48BF-                           mov rdi, float_numbers
   192 000001BA [5A00000000000000] 
   193 000001C2 4C89FE                          mov rsi, r15
   194 000001C5 E8(00000000)                    call normalize_array
   195                                  
   196                                      ;Program prints the normalized array
   197 000001CA B800000000                      mov qword rax, 0
   198 000001CF 48BF-                           mov rdi, float_numbers
   198 000001D1 [5A00000000000000] 
   199 000001D9 4C89FE                          mov rsi, r15
   200 000001DC E8(00000000)                    call show_array
   201                                  
   202                                      ;Prints - The array will now be sorted
   203 000001E1 B800000000                      mov qword rax, 0
   204 000001E6 48BF-                           mov rdi, sort_array_message
   204 000001E8 [D501000000000000] 
   205 000001F0 E8(00000000)                    call printf
   206                                  
   207                                      ;Program sorts the array
   208 000001F5 B800000000                      mov qword rax, 0
   209 000001FA 48BF-                           mov rdi, float_numbers
   209 000001FC [5A00000000000000] 
   210 00000204 4C89FE                          mov rsi, r15
   211 00000207 E8(00000000)                    call sort
   212                                  
   213                                      ;Program prints the sorted array
   214 0000020C B800000000                      mov qword rax, 0
   215 00000211 48BF-                           mov rdi, float_numbers
   215 00000213 [5A00000000000000] 
   216 0000021B 4C89FE                          mov rsi, r15
   217 0000021E E8(00000000)                    call show_array
   218                                  
   219                                      ;Prints - Good bye Freshman. You are welcome any time.
   220 00000223 B800000000                      mov qword rax, 0
   221 00000228 48BF-                           mov rdi, program_complete
   221 0000022A [F401000000000000] 
   222 00000232 E8(00000000)                    call printf
   223                                  
   224                                      ;Program sends the username to the main file
   225 00000237 48B8-                           mov rax, username
   225 00000239 [0000000000000000] 
   226 00000241 F20F100424                      movsd xmm0, [rsp]
   227                                  
   228                                      ;Restores the stack
   229 00000246 9D                              popf
   230 00000247 415F                            pop r15
   231 00000249 415E                            pop r14
   232 0000024B 415D                            pop r13
   233 0000024D 415C                            pop r12
   234 0000024F 415B                            pop r11
   235 00000251 415A                            pop r10
   236 00000253 4159                            pop r9
   237 00000255 4158                            pop r8
   238 00000257 5E                              pop rsi
   239 00000258 5F                              pop rdi
   240 00000259 5A                              pop rdx
   241 0000025A 59                              pop rcx
   242 0000025B 5B                              pop rbx
   243 0000025C 5D                              pop rbp
   244 0000025D C3                              ret
