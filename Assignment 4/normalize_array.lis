     1                                  ;****************************************************************************************************************************
     2                                  ;Program name: "Non-deterministic Random Numbers".                                                                                  *
     3                                  ;white space.  Copyright (C) 2024  Jay Parmar                                                                               *
     4                                  ;This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License  *
     5                                  ;version 3 as published by the Free Software Foundation.                                                                    *
     6                                  ;This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied         *
     7                                  ;warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.     *
     8                                  ;A copy of the GNU General Public License v3 is available here:  <https://www.gnu.org/licenses/>.                           *
     9                                  ;****************************************************************************************************************************
    10                                  
    11                                  
    12                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3=========4=========5=========6=========7**
    13                                  ;Author information
    14                                  ;  Author name: Jay Parmar
    15                                  ;  Programmer CWID: 885463034
    16                                  ;  Author email: Jay-04.CS@csu.fullerton.edu
    17                                  ;
    18                                  ;Program information
    19                                  ; Program name: Non-deterministic Random Numbers
    20                                  ;  Programming languages X86 with two modules in C
    21                                  ;Purpose
    22                                  ;  This program will serve to create numbers, normalize the numbers the program created, sort the numbers, and print the numbers.
    23                                  ;
    24                                  ;Project information
    25                                  ;  Files: main.c, execute.asm, fill_random_array.asm, normalize_array.asm, show_array.asm, isnan.asm, sort.c, r.sh
    26                                  ;  Status: The program has been tested extensively with no detectable errors.
    27                                  ;
    28                                  ;Translator information
    29                                  ;  Linux: nasm -f elf64 -l normalize_array.lis -o normalize_array.o normalize_array.asm
    30                                  ;
    31                                  ;===== Begin code area ====================================================================================================================================================
    32                                  
    33                                  ;Declarations
    34                                  global normalize_array
    35                                  
    36                                  segment .data
    37                                  
    38                                  
    39                                  segment .bss
    40                                  
    41                                  segment .text
    42                                      normalize_array:
    43 00000000 55                              push rbp
    44 00000001 4889E5                          mov rbp, rsp
    45 00000004 53                              push rbx
    46 00000005 51                              push rcx
    47 00000006 52                              push rdx
    48 00000007 57                              push rdi
    49 00000008 56                              push rsi
    50 00000009 4150                            push r8
    51 0000000B 4151                            push r9
    52 0000000D 4152                            push r10
    53 0000000F 4153                            push r11
    54 00000011 4154                            push r12
    55 00000013 4155                            push r13
    56 00000015 4156                            push r14
    57 00000017 4157                            push r15
    58 00000019 9C                              pushf
    59                                  
    60 0000001A 4989FF                          mov r15, rdi
    61 0000001D 4989F6                          mov r14, rsi
    62 00000020 41BD00000000                    mov r13, 0
    63                                  
    64                                      ;This code block makes sure that the program only creates the specified amount of numbers
    65                                      array_code:
    66 00000026 4D39F5                          cmp r13, r14
    67 00000029 7C02                            jl Normalize_start_code
    68 0000002B EB3A                            jmp finish
    69                                  
    70                                      ;This code block normalizes the numbers in the array
    71                                      Normalize_start_code:
    72 0000002D F2470F103CEF                    movsd xmm15, [r15 + r13 * 8]
    73 00000033 6A00                            push qword 0
    74 00000035 F2440F113C24                    movsd [rsp], xmm15
    75 0000003B 415C                            pop r12
    76 0000003D 49C1E40C                        shl r12, 12
    77 00000041 49C1EC0C                        shr r12, 12
    78 00000045 48B8000000000000F0-             mov rax, 0x3ff0000000000000
    78 0000004E 3F                 
    79 0000004F 4909C4                          or r12, rax
    80                                          
    81 00000052 4154                            push r12
    82 00000054 F2440F103C24                    movsd xmm15, [rsp]
    83 0000005A 415C                            pop r12
    84                                  
    85 0000005C F2470F113CEF                    movsd [r15 + r13 * 8], xmm15
    86 00000062 49FFC5                          inc r13
    87 00000065 EBBF                            jmp array_code
    88                                  
    89                                      ;Completes the execution of the file
    90                                      finish:
    91 00000067 9D                              popf
    92 00000068 415F                            pop r15
    93 0000006A 415E                            pop r14
    94 0000006C 415D                            pop r13
    95 0000006E 415C                            pop r12
    96 00000070 415B                            pop r11
    97 00000072 415A                            pop r10
    98 00000074 4159                            pop r9
    99 00000076 4158                            pop r8
   100 00000078 5E                              pop rsi
   101 00000079 5F                              pop rdi
   102 0000007A 5A                              pop rdx
   103 0000007B 59                              pop rcx
   104 0000007C 5B                              pop rbx
   105 0000007D 5D                              pop rbp
   106 0000007E C3                              ret
