     1                                  ;========= Begin function isinteger ==================================================================================
     2                                  
     3                                  ;****************************************************************************************************************************
     4                                  ;Program name: "isinteger".  This a library function contained in a single file.  The function receives a char parameter.  It*
     5                                  ;returns true if that parameter is the ascii value of a decimal digit and returns false in all other cases.                  *
     6                                  ;Copyright (C) 2022 Floyd Holliday.                                                                                         *
     7                                  ;                                                                                                                           *
     8                                  ;This program is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public   *
     9                                  ;License version 3 as published by the Free Software Foundation.  This program is distributed in the hope that it will be   *
    10                                  ;useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.*
    11                                  ;See the GNU Lesser General Public License for more details. A copy of the GNU General Public License v3 is available here: *
    12                                  ;<https:;www.gnu.org/licenses/>.                                                                                            *
    13                                  ;****************************************************************************************************************************
    14                                  ;
    15                                  ;
    16                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3**
    17                                  ;Author information
    18                                  ;  Author name: Floyd Holliday
    19                                  ;  Author email: holliday@fullerton.edu
    20                                  ;  Author phone (wired phone in CS building): (657)278-7021
    21                                  ;
    22                                  ;Status
    23                                  ;  This software is not an application program, but rather it is a single function licensed for use by other applications.
    24                                  ;  This function can be embedded within both FOSS programs and in proprietary programs as permitted by the LGPL.
    25                                  
    26                                  ;Function information
    27                                  ;  Function name: is_digit
    28                                  ;  Name selection.  This function is named is_digit to avoid confusion with an existing library function named isdigit.
    29                                  ;  Programming language: X86 assembly in Intel syntax.
    30                                  ;  Date development began:  2022-Feb-28
    31                                  ;  Date version 1.0 finished: 2022-Feb 28
    32                                  ;  Files of this function: currently is_digit is an auxillary function of isfloat, and as such does not occupy its own file.
    33                                  ;  System requirements: an X86 platform with nasm installed or other compatible assembler.
    34                                  ;  Known issues: none
    35                                  ;  Assembler used for testing: Nasm version 2.14.02
    36                                  ;  Prototype: bool is_digit(char);
    37                                  ;
    38                                  ;Purpose
    39                                  ;  This function wil accept a single char as input parameter and determine if that parameter represents a decimal digit. 
    40                                  ;
    41                                  ;Translation information if this function occupied its own file.  Currently the function is_digit resides in the same 
    42                                  ;same file as isfloat and therefore, will be assembled when isfloat is assembled.
    43                                  ;  Assemble: nasm -f elf64 -l is_digit.lis -o is_digit.o is_digit.asm
    44                                  ;
    45                                  ;Software design document:
    46                                  ;  An Execution flow chart accompanies this function.  That document will provide a better understanding of the 
    47                                  ;  algorithm used in the isfloat function than a direct reading of the source code of the function.
    48                                  
    49                                  ;========= Begin source code ====================================================================================
    50                                  ;Declaration area
    51                                  
    52                                  global isinteger
    53                                  extern strlen
    54                                  extern printf
    55                                  
    56                                  segment .data
    57                                  
    58                                  segment .bss
    59                                  
    60                                  segment .text
    61                                  isinteger:
    62                                      ;15 pushes
    63 00000000 55                          push    rbp                     ;Backup rbp
    64 00000001 4889E5                      mov     rbp,rsp                 ;The base pointer now points to top of stack
    65 00000004 57                          push    rdi                     ;Backup rdi
    66 00000005 56                          push    rsi                     ;Backup rsi
    67 00000006 52                          push    rdx                     ;Backup rdx
    68 00000007 51                          push    rcx                     ;Backup rcx
    69 00000008 4150                        push    r8                      ;Backup r8
    70 0000000A 4151                        push    r9                      ;Backup r9
    71 0000000C 4152                        push    r10                     ;Backup r10
    72 0000000E 4153                        push    r11                     ;Backup r11
    73 00000010 4154                        push    r12                     ;Backup r12
    74 00000012 4155                        push    r13                     ;Backup r13
    75 00000014 4156                        push    r14                     ;Backup r14
    76 00000016 4157                        push    r15                     ;Backup r15
    77 00000018 53                          push    rbx                     ;Backup rbx
    78 00000019 9C                          pushf                           ;Backup rflags
    79                                  
    80 0000001A 4989FF                      mov     r15, rdi                ; rdi contains the start of the array
    81 0000001D 41BE01000000                mov     r14, 1                  ; r14 is the index starting at 1
    82                                  
    83                                      ; Get the string length
    84 00000023 4C89FF                      mov     rdi, r15
    85 00000026 E8(00000000)                call    strlen
    86 0000002B 4989C5                      mov     r13, rax                
    87 0000002E 49FFCD                      dec     r13                     ; r13 store the string length minus the null termination character
    88                                  
    89                                      ; Check if the first element is '+' or '-' and continute validation if so
    90 00000031 41803F2B                    cmp     byte[r15], '+'
    91 00000035 7414                        je      continue_validation
    92 00000037 41803F2D                    cmp     byte[r15], '-'
    93 0000003B 740E                        je      continue_validation
    94                                  
    95                                      ; Check if the first element is a digit, continue to the loop if it is
    96 0000003D 498B3F                      mov     rdi, [r15]
    97 00000040 E847000000                  call    is_digit
    98 00000045 4883F800                    cmp     rax, 0
    99 00000049 7419                        je      not_an_integer
   100                                  
   101                                  continue_validation:
   102                                      ; If index >= length, stop checking
   103 0000004B 4D39EE                      cmp     r14, r13
   104 0000004E 7D1D                        jge     is_an_integer  
   105                                  
   106                                      ; Check if array[index] is a digit, translate to { is_digit(array[index]) } code in C
   107 00000050 4B8B3C37                    mov     rdi, [r15 + r14 * 1]    ; Calculate the address of a char(byte) array. r15 is the base address, r14 * 1 is the offset. 1 is redundant, but showing it is offset by 1 byte time the index count
   108 00000054 E833000000                  call    is_digit
   109                                  
   110                                      ; If array[index] is not a digit, return false
   111 00000059 4883F800                    cmp     rax, 0                  ; Assembly has no bolean; 0 = false, -1 = true as user defined in is_digit() below
   112 0000005D 7405                        je      not_an_integer
   113                                  
   114                                      ; If array[index] is a digit, continue the loop
   115 0000005F 49FFC6                      inc     r14
   116 00000062 EBE7                        jmp     continue_validation
   117                                  
   118                                  not_an_integer:
   119                                      ; Set the return to false
   120 00000064 48C7C0FFFFFFFF              mov     rax, -1                 ; I define -1 = false
   121 0000006B EB07                        jmp     exit
   122                                  is_an_integer:
   123                                      ; Set the return to true
   124 0000006D B800000000                  mov     rax, 0                  ; I define 0 = true    
   125 00000072 EB00                        jmp     exit                
   126                                  
   127                                  exit:
   128                                      ;15 pop
   129 00000074 9D                          popf                            ;Restore rflags
   130 00000075 5B                          pop     rbx                     ;Restore rbx
   131 00000076 415F                        pop     r15                     ;Restore r15
   132 00000078 415E                        pop     r14                     ;Restore r14
   133 0000007A 415D                        pop     r13                     ;Restore r13
   134 0000007C 415C                        pop     r12                     ;Restore r12
   135 0000007E 415B                        pop     r11                     ;Restore r11
   136 00000080 415A                        pop     r10                     ;Restore r10
   137 00000082 4159                        pop     r9                      ;Restore r9
   138 00000084 4158                        pop     r8                      ;Restore r8
   139 00000086 59                          pop     rcx                     ;Restore rcx
   140 00000087 5A                          pop     rdx                     ;Restore rdx
   141 00000088 5E                          pop     rsi                     ;Restore rsi
   142 00000089 5F                          pop     rdi                     ;Restore rdi
   143 0000008A 5D                          pop     rbp                     ;Restore rbp
   144                                  
   145 0000008B C3                          ret
   146                                  
   147                                  ;========= Begin function is_digit ==================================================================================
   148                                  
   149                                  ;****************************************************************************************************************************
   150                                  ;Program name: "is_digit".  This a library function contained in a single file.  The function receives a char parameter.  It*
   151                                  ;returns true if that parameter is the ascii value of a decimal digit and returns false in all other cases.                  *
   152                                  ;Copyright (C) 2022 Floyd Holliday.                                                                                         *
   153                                  ;                                                                                                                           *
   154                                  ;This program is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public   *
   155                                  ;License version 3 as published by the Free Software Foundation.  This program is distributed in the hope that it will be   *
   156                                  ;useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.*
   157                                  ;See the GNU Lesser General Public License for more details. A copy of the GNU General Public License v3 is available here: *
   158                                  ;<https:;www.gnu.org/licenses/>.                                                                                            *
   159                                  ;****************************************************************************************************************************
   160                                  ;
   161                                  ;
   162                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3**
   163                                  ;Author information
   164                                  ;  Author name: Floyd Holliday
   165                                  ;  Author email: holliday@fullerton.edu
   166                                  ;  Author phone (wired phone in CS building): (657)278-7021
   167                                  ;
   168                                  ;Status
   169                                  ;  This software is not an application program, but rather it is a single function licensed for use by other applications.
   170                                  ;  This function can be embedded within both FOSS programs and in proprietary programs as permitted by the LGPL.
   171                                  
   172                                  ;Function information
   173                                  ;  Function name: is_digit
   174                                  ;  Name selection.  This function is named is_digit to avoid confusion with an existing library function named isdigit.
   175                                  ;  Programming language: X86 assembly in Intel syntax.
   176                                  ;  Date development began:  2022-Feb-28
   177                                  ;  Date version 1.0 finished: 2022-Feb 28
   178                                  ;  Files of this function: currently is_digit is an auxillary function of isfloat, and as such does not occupy its own file.
   179                                  ;  System requirements: an X86 platform with nasm installed or other compatible assembler.
   180                                  ;  Known issues: none
   181                                  ;  Assembler used for testing: Nasm version 2.14.02
   182                                  ;  Prototype: bool is_digit(char);
   183                                  ;
   184                                  ;Purpose
   185                                  ;  This function wil accept a single char as input parameter and determine if that parameter represents a decimal digit. 
   186                                  ;
   187                                  ;Translation information if this function occupied its own file.  Currently the function is_digit resides in the same 
   188                                  ;same file as isfloat and therefore, will be assembled when isfloat is assembled.
   189                                  ;  Assemble: nasm -f elf64 -l is_digit.lis -o is_digit.o is_digit.asm
   190                                  ;
   191                                  ;Software design document:
   192                                  ;  An Execution flow chart accompanies this function.  That document will provide a better understanding of the 
   193                                  ;  algorithm used in the isfloat function than a direct reading of the source code of the function.
   194                                  
   195                                  ;========= Begin source code ====================================================================================
   196                                  ;Declaration area
   197                                  true equ -1
   198                                  false equ 0
   199                                  ascii_value_of_zero equ 0x30
   200                                  ascii_value_of_nine equ 0x39
   201                                  
   202                                  segment .data
   203                                     ;This segment is empty
   204                                  
   205                                  segment .bss
   206                                     ;This segment is empty
   207                                  
   208                                  segment .text
   209                                  is_digit:
   210                                      ;Block that backs up almost all GPRs
   211                                      ;Back up the general purpose registers for the sole purpose of protecting the data of the caller.
   212 0000008C 55                          push rbp                                          ;Backup rbp
   213 0000008D 4889E5                      mov  rbp,rsp                                      ;The base pointer now points to top of stack
   214 00000090 57                          push rdi                                          ;Backup rdi
   215 00000091 56                          push rsi                                          ;Backup rsi
   216 00000092 52                          push rdx                                          ;Backup rdx
   217 00000093 51                          push rcx                                          ;Backup rcx
   218 00000094 4150                        push r8                                           ;Backup r8
   219 00000096 4151                        push r9                                           ;Backup r9
   220 00000098 4152                        push r10                                          ;Backup r10
   221 0000009A 4153                        push r11                                          ;Backup r11
   222 0000009C 4154                        push r12                                          ;Backup r12
   223 0000009E 4155                        push r13                                          ;Backup r13
   224 000000A0 4156                        push r14                                          ;Backup r14
   225 000000A2 4157                        push r15                                          ;Backup r15
   226 000000A4 53                          push rbx                                          ;Backup rbx
   227 000000A5 9C                          pushf                                             ;Backup rflags
   228                                  
   229                                      ;Make a copy of the passed in array of ascii values.
   230                                      ;Note that only the low one-byte of rdi is important for this function is_digit.
   231                                      ;Nevertheless, we copy the entire 8-byte register.
   232 000000A6 41BD00000000                mov r13,0
   233 000000AC 4188FD                      mov r13b,dil     ;Copy the low byte of rdi to the low byte of r13.  The other bytes of rdi are all zeros.
   234                                  
   235                                      ;Block to test if value in r13 >= ascii(0)
   236 000000AF 4983FD30                    cmp r13,ascii_value_of_zero
   237 000000B3 7C12                        jl is_digit.return_false
   238                                  
   239                                      ;Block to test if value in r13 <= ascii(9)
   240 000000B5 4983FD39                    cmp r13,ascii_value_of_nine
   241 000000B9 7F0C                        jg is_digit.return_false
   242                                  
   243                                      ;Return true
   244 000000BB 4831C0                      xor rax,rax  ;Set rax to zero
   245 000000BE 48C7C0FFFFFFFF              mov rax,true
   246 000000C5 EB08                        jmp is_digit.restore_gpr_registers
   247                                  
   248                                      is_digit.return_false:
   249 000000C7 4831C0                      xor rax,rax  ;Set rax to zero
   250 000000CA B800000000                  mov rax,false
   251                                  
   252                                      is_digit.restore_gpr_registers:
   253                                      ;Restore all general purpose registers to their original values
   254 000000CF 9D                          popf                                    ;Restore rflags
   255 000000D0 5B                          pop rbx                                 ;Restore rbx
   256 000000D1 415F                        pop r15                                 ;Restore r15
   257 000000D3 415E                        pop r14                                 ;Restore r14
   258 000000D5 415D                        pop r13                                 ;Restore r13
   259 000000D7 415C                        pop r12                                 ;Restore r12
   260 000000D9 415B                        pop r11                                 ;Restore r11
   261 000000DB 415A                        pop r10                                 ;Restore r10
   262 000000DD 4159                        pop r9                                  ;Restore r9
   263 000000DF 4158                        pop r8                                  ;Restore r8
   264 000000E1 59                          pop rcx                                 ;Restore rcx
   265 000000E2 5A                          pop rdx                                 ;Restore rdx
   266 000000E3 5E                          pop rsi                                 ;Restore rsi
   267 000000E4 5F                          pop rdi                                 ;Restore rdi
   268 000000E5 5D                          pop rbp                                 ;Restore rbp
   269                                  
   270 000000E6 C3                          ret                                     ;Pop the integer stack and jump to the address represented by the popped value.
