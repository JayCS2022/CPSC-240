     1                                  ;****************************************************************************************************************************
     2                                  ;Program name: "Arrays".                                                                                  *
     3                                  ;white space.  Copyright (C) 2024  Jay Parmar                                                                               *
     4                                  ;This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License  *
     5                                  ;version 3 as published by the Free Software Foundation.                                                                    *
     6                                  ;This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied         *
     7                                  ;warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.     *
     8                                  ;A copy of the GNU General Public License v3 is available here:  <https://www.gnu.org/licenses/>.                           *
     9                                  ;****************************************************************************************************************************
    10                                  
    11                                  
    12                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3=========4=========5=========6=========7**
    13                                  ;Author information
    14                                  ;  Author name: Jay Parmar
    15                                  ;  Programmer CWID: 885463034
    16                                  ;  Author email: Jay-04.CS@csu.fullerton.edu
    17                                  ;
    18                                  ;Program information
    19                                  ; Program name: Arrays
    20                                  ;  Programming languages X86 with two modules in C
    21                                  ;Purpose
    22                                  ;  This program will serve to store, calcualte the sum, sort, and print integer arrays from user input.
    23                                  ;
    24                                  ;Project information
    25                                  ;  Files: Main.c, Manager.asm, Sum.asm, Output_array.asm, Input_array.asm, isinteger.asm, Sort.c, r.sh
    26                                  ;  Status: The program has been tested extensively with no detectable errors.
    27                                  ;
    28                                  ;Translator information
    29                                  ;  Linux: nasm -f elf64 -l Sum.lis -o Sum.o Sum.asm
    30                                  ;
    31                                  ;===== Begin code area ====================================================================================================================================================
    32                                  
    33                                  ;Declarations
    34                                  global Sum
    35                                  
    36                                  null equ 0
    37                                  
    38                                  segment .data
    39                                  
    40                                  segment .bss
    41                                  
    42                                  
    43                                  segment .text
    44                                      Sum:
    45 00000000 55                              push rbp
    46 00000001 4889E5                          mov  rbp,rsp
    47 00000004 57                              push rdi
    48 00000005 56                              push rsi
    49 00000006 52                              push rdx
    50 00000007 51                              push rcx
    51 00000008 4150                            push r8
    52 0000000A 4151                            push r9
    53 0000000C 4152                            push r10
    54 0000000E 4153                            push r11
    55 00000010 4154                            push r12
    56 00000012 4155                            push r13
    57 00000014 4156                            push r14
    58 00000016 4157                            push r15
    59 00000018 53                              push rbx
    60 00000019 9C                              pushf
    61                                  
    62 0000001A 4831C0                          xor rax, rax                                      ; Initialize sum (rax = 0)
    63 0000001D 4D31F6                          xor r14, r14                                      ; Initialize index (r14 = 0)
    64                                  
    65 00000020 4989FC                          mov r12, rdi                                      ; r12 = address of nice_array
    66 00000023 4989F5                          mov r13, rsi                                      ; r13 = count
    67                                  
    68                                      ;Calculates the Sum of the array received
    69                                      sumLoop:
    70 00000026 4D39EE                          cmp r14, r13
    71 00000029 7D09                            jge endLoop
    72                                  
    73 0000002B 4B0304F4                        add rax, qword [r12 + r14 * 8]
    74 0000002F 49FFC6                          inc r14
    75                                  
    76 00000032 EBF2                            jmp sumLoop
    77                                  
    78                                      ;Sends the sum information to the Manager file
    79                                      endLoop:
    80 00000034 4989C6                          mov r14, rax
    81 00000037 4C89F0                          mov qword rax, r14
    82                                  
    83 0000003A 9D                              popf                                    ;Restore rflags
    84 0000003B 5B                              pop rbx                                 ;Restore rbx
    85 0000003C 415F                            pop r15                                 ;Restore r15
    86 0000003E 415E                            pop r14                                 ;Restore r14
    87 00000040 415D                            pop r13                                 ;Restore r13
    88 00000042 415C                            pop r12                                 ;Restore r12
    89 00000044 415B                            pop r11                                 ;Restore r11
    90 00000046 415A                            pop r10                                 ;Restore r10
    91 00000048 4159                            pop r9                                  ;Restore r9
    92 0000004A 4158                            pop r8                                  ;Restore r8
    93 0000004C 59                              pop rcx                                 ;Restore rcx
    94 0000004D 5A                              pop rdx                                 ;Restore rdx
    95 0000004E 5E                              pop rsi                                 ;Restore rsi
    96 0000004F 5F                              pop rdi                                 ;Restore rdi
    97 00000050 5D                              pop rbp                                 ;Restore rbp
    98                                  
    99 00000051 C3                          ret
   100 00000052 C3                              ret
